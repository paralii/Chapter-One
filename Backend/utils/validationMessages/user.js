export const validationMessages = {
  cart: {
    notFound: "Cart not found",
    productUnavailable: "Product is unavailable",
    categoryNotListed: "Product's category is not listed",
    exceedsStock: "Exceeds available stock",
    maxLimit: "Cannot order more than 5 units of a product",
    quantityInvalid: "Quantity cannot be less than 1",
    notInCart: "Product not in cart",
    quantityUpdated: "Cart item quantity updated successfully",
    addedToCart: "Cart updated successfully",
    removedFromCart: "Product removed from cart",
    incremented: "Cart item quantity incremented successfully",
    decremented: "Cart item quantity decremented successfully",
  },

  category: {
    fetchError: "Server error while fetching categories",
  },

  checkout: {
    addressRequired: "Address ID and Order ID are required",
    invalidIds: "Invalid Address ID or Order ID format",
    invalidPayment: "Invalid payment method",
    notFoundOrMismatch: "Order not found or address mismatch",
    cartEmpty: "Cart is empty",
    noAddress: "No address available",
    invalidReferral: "Invalid or inactive referral code",
    stockUnavailable: "Insufficient stock for this product",
    checkoutSuccess: "Checkout details fetched successfully",
  },

  coupon: {
    invalidOrderId: "Invalid order ID format",
    codeRequired: "Coupon code is required",
    orderNotFound: "Order not found",
    alreadyApplied: "This coupon is already applied to the order",
    noItems: "Order has no items",
    invalidCoupon: "Coupon is invalid, expired, or usage limit exceeded",
    minOrderNotMet: "Minimum order value not met for this coupon",
    alreadyUsed: "You have already used this coupon",
    discountExceedsTotal: "Discount cannot exceed order total",
    applied: "Coupon applied successfully",
    removed: "Coupon removed successfully",
  },

  offer: {
    selfRefer: "Cannot refer yourself",
    invalidCode: "Invalid referral code format",
    invalidOrInactive: "Invalid or inactive referral code",
    referralValidated: "Referral code validated",
    referralDisabled: "Referral offer is disabled",
  },

  order: {
    addressRequired: "Address ID is required",
    invalidAddressId: "Invalid address ID format",
    itemsRequired: "Items array is required and cannot be empty",
    invalidPayment: "Payment method must be COD, ONLINE, or Wallet",
    invalidAmount: "Amount must be a positive number",
    invalidTotal: "Total must be a positive number",
    netAmountInvalid: "Calculated net amount must be a positive number",
    codLimit: "Cash on Delivery is not allowed for orders above Rs 1000",
    duplicateOnline: "Duplicate Razorpay order/payment ID",
    tempOrderCreated: "Temporary order created successfully",
    orderPlaced: "Order placed successfully",
    insufficientWallet: "Insufficient wallet balance",
    noItemsToOrder: "No items to order",
    invalidOrUnauthorizedAddress: "Invalid or unauthorized address",
    cancelNotAllowed: "Order cannot be cancelled in current status",
    itemNotInOrder: "Item not found in order",
    cancelled: "Cancellation processed successfully",
    returnReasonRequired: "Return reason is required",
    notDelivered: "Only delivered orders can be returned",
    itemNotDelivered: "Item is not eligible for return",
    returned: "Return request submitted",
    invoiceMissing: "Invoice file not generated",
    orderNotFound: "Order not found",
  },

  product: {
    notAvailable: "Product not available",
  },

  profile: {
    notFound: "User not found",
    updated: "Profile updated",
    incorrectPassword: "Incorrect old password",
    passwordUpdated: "Password updated successfully",
    noImage: "No image file uploaded",
    imageUpdated: "Profile image updated",
    otpSent: "OTP sent",
    emailUpdated: "Email updated",
    invalidOtp: "Invalid OTP",
    expiredOtp: "OTP expired or invalid",
  },

  wallet: {
    fetchError: "Failed to fetch wallet details",
    creditInvalid: "Credit amount must be greater than zero",
    creditExceeded: "Credit amount exceeds the maximum limit",
    debitInvalid: "Debit amount must be greater than zero",
    debitExceeded: "Debit amount exceeds the maximum limit",
    notFound: "Wallet not found for the user",
    insufficient: "Insufficient wallet balance",
    integrityError: "Wallet integrity check failed",
  },

  wishlist: {
    notFound: "Wishlist not found",
    productNotFound: "Product not found",
    alreadyInWishlist: "Product already in wishlist",
    added: "Product added to wishlist",
    removed: "Product removed from wishlist",
    alreadyInCart: "Product already in cart",
    movedToCart: "Product moved to cart",
    fetchFailed: "Failed to fetch wishlist",
  },
};
